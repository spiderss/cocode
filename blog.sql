/*
Navicat MySQL Data Transfer

Source Server         : 测试
Source Server Version : 50553
Source Host           : 127.0.0.1:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50553
File Encoding         : 65001

Date: 2017-08-26 21:14:32
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for yl_admin
-- ----------------------------
DROP TABLE IF EXISTS `yl_admin`;
CREATE TABLE `yl_admin` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT COMMENT '管理员id',
  `username` varchar(40) NOT NULL COMMENT '管理员用户名',
  `password` char(32) NOT NULL COMMENT '管理员密码',
  `status` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`,`status`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yl_admin
-- ----------------------------
INSERT INTO `yl_admin` VALUES ('1', 'admin', 'e10adc3949ba59abbe56e057f20f883e', '1');
INSERT INTO `yl_admin` VALUES ('2', 'admin2', '123456', '1');

-- ----------------------------
-- Table structure for yl_article
-- ----------------------------
DROP TABLE IF EXISTS `yl_article`;
CREATE TABLE `yl_article` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT COMMENT '文章id',
  `title` varchar(60) NOT NULL COMMENT '文章标题',
  `desc` varchar(255) NOT NULL COMMENT '文章描述',
  `pic` varchar(100) NOT NULL COMMENT '文章缩略图',
  `content` text NOT NULL COMMENT '文章内容',
  `cateid` mediumint(9) NOT NULL COMMENT '文章所属栏目id',
  `createtime` int(10) NOT NULL COMMENT '发布时间',
  `inputtime` int(10) NOT NULL COMMENT '更新时间',
  `status` tinyint(1) NOT NULL DEFAULT '1',
  `sort` int(9) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yl_article
-- ----------------------------
INSERT INTO `yl_article` VALUES ('1', 'PHP解决网站大数据大流量与高并发', '大数据（big data），指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。', './Public/Uploads/2017-08-26/59a1533ce2484.jpg', '&lt;ul&gt;\r\n	&lt;li&gt;\r\n		1，硬件方面\r\n	&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 普通的P4服务器最多支持10万左右的ip，影响硬件有：网络-硬盘读写速度-内存大小-cpu处理熟读\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;ul&gt;\r\n		&lt;li&gt;\r\n			&amp;nbsp;2，软件方面\r\n		&lt;/li&gt;\r\n	&lt;/ul&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 数据库优化：\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;选择合适的数据库引擎 MYSIAM 读写速度快但不支持事物，Innodb 支持事务\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 设计合理的数据库结构，数据库读写分离，设置主从数据库\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;设置合适的索引，主键和外键\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;允许适当的冗余数据，字段设计尽量不使用null\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 存储过程，视图的适当使用\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; sql优化：\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 查询优化避免全表查询\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;避免在where子句中对字段进行null值判断\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;尽量避免where子句中使用！=或&amp;lt;&amp;gt;操作符\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 尽量避免where子句使用or连接\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; in 和not in 用exists和no exists代替\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;span style=&quot;color:#333333;font-family:&amp;quot;font-size:16px;text-align:justify;white-space:normal;background-color:#FFFFFF;&quot;&gt;应尽量&lt;/span&gt;&lt;span style=&quot;font-family:&amp;quot;font-size:16px;text-align:justify;white-space:normal;background-color:#FFFFFF;color:#FF0000;&quot;&gt;避免在 where 子句中对字段进行表达式操作&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;white-space:normal;color:#333333;font-family:&amp;quot;font-size:16px;text-align:justify;background-color:#FFFFFF;&quot;&gt;应尽量&lt;/span&gt;&lt;span style=&quot;white-space:normal;font-family:&amp;quot;font-size:16px;text-align:justify;background-color:#FFFFFF;color:#FF0000;&quot;&gt;避免在 where 子句中对字段进行函数操作&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; select * 改成具体的字段\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 禁止外部盗链\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;控制大文件的下载\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp;&amp;nbsp;\r\n&lt;/p&gt;', '1', '1503744828', '1503744828', '1', '0');
INSERT INTO `yl_article` VALUES ('2', 'Redis与Memcached的区别', '', '', '&lt;p&gt;\r\n	&lt;span style=&quot;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;转载地址：http://gnucto.blog.51cto.com/3391516/998509&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;\r\n&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#555555;font-family:宋体, &amp;quot;line-height:28px;&quot;&gt;\r\n	&lt;span style=&quot;padding:0px;margin:0px;color:#333333;font-family:Arial;line-height:26px;&quot;&gt;传统&lt;a href=&quot;http://lib.csdn.net/base/mysql&quot; class=&quot;replace_word&quot; title=&quot;MySQL知识库&quot; target=&quot;_blank&quot; style=&quot;color:#DF3434;text-decoration:none;font-weight:bold;&quot;&gt;MySQL&lt;/a&gt;+ Memcached&lt;a href=&quot;http://lib.csdn.net/base/architecture&quot; class=&quot;replace_word&quot; title=&quot;大型网站架构知识库&quot; target=&quot;_blank&quot; style=&quot;color:#DF3434;text-decoration:none;font-weight:bold;&quot;&gt;架构&lt;/a&gt;遇到的问题&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n	&amp;emsp;&amp;emsp;实际&lt;a href=&quot;http://lib.csdn.net/base/mysql&quot; class=&quot;replace_word&quot; title=&quot;MySQL知识库&quot; target=&quot;_blank&quot; style=&quot;color:#DF3434;text-decoration:none;font-weight:bold;&quot;&gt;mysql&lt;/a&gt;是适合进行海量数据存储的，通过Memcached将热点数据加载到cache，加速访问，很多公司都曾经使用过这样的架构，但随着业务数据量的不断增加，和访问量的持续增长，我们遇到了很多问题：\r\n&lt;/p&gt;\r\n&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n	&amp;emsp;&amp;emsp;1.MySQL需要不断进行拆库拆表，Memcached也需不断跟着扩容，扩容和维护工作占据大量开发时间。\r\n&lt;/p&gt;\r\n&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n	&amp;emsp;&amp;emsp;2.Memcached与MySQL&lt;a href=&quot;http://lib.csdn.net/base/mysql&quot; class=&quot;replace_word&quot; title=&quot;MySQL知识库&quot; target=&quot;_blank&quot; style=&quot;color:#DF3434;text-decoration:none;font-weight:bold;&quot;&gt;数据库&lt;/a&gt;数据一致性问题。\r\n&lt;/p&gt;\r\n&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n	&amp;emsp;&amp;emsp;3.Memcached数据命中率低或down机，大量访问直接穿透到DB，MySQL无法支撑。\r\n&lt;/p&gt;\r\n&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n	&amp;emsp;&amp;emsp;4.跨机房cache同步问题。\r\n&lt;/p&gt;\r\n&lt;span style=&quot;white-space:normal;background-color:#FFFFFF;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;Redis最适合所有数据in-momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk-backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached,何时使用Redis呢?&lt;/span&gt;\r\n&lt;p&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp; &amp;nbsp;&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot; style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;padding:0px;margin:0px;&quot; /&gt;\r\n&lt;br data-filtered=&quot;filtered&quot; style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;padding:0px;margin:0px;&quot; /&gt;\r\n&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;&amp;nbsp; 1&amp;nbsp; Redis不仅仅支持简单的k/v类型的数据，同时还提供string,list，set，zset，hash等&lt;/span&gt;&lt;a href=&quot;http://lib.csdn.net/base/datastructure&quot; class=&quot;replace_word&quot; title=&quot;算法与数据结构知识库&quot; target=&quot;_blank&quot; style=&quot;color:#DF3434;text-decoration:none;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;font-weight:bold;&quot;&gt;数据结构&lt;/a&gt;&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;的存储。&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot; style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;padding:0px;margin:0px;&quot; /&gt;\r\n&lt;br data-filtered=&quot;filtered&quot; style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;padding:0px;margin:0px;&quot; /&gt;\r\n&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;&amp;nbsp; 2&amp;nbsp; Redis支持数据的备份，即master-slave模式的数据备份。&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot; style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;padding:0px;margin:0px;&quot; /&gt;\r\n&lt;br data-filtered=&quot;filtered&quot; style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;padding:0px;margin:0px;&quot; /&gt;\r\n&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;&amp;nbsp; &amp;nbsp;3&amp;nbsp; Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot; style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;padding:0px;margin:0px;&quot; /&gt;\r\n&lt;br data-filtered=&quot;filtered&quot; style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;padding:0px;margin:0px;&quot; /&gt;\r\n&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;&amp;nbsp; &amp;nbsp;抛开这些，可以深入到Redis内部构造去观察更加本质的区别，理解Redis的设计。&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;nbsp;&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;在Redis中，并不是所有的数据都一直存储在内存中的。这是和Memcached相比一个最大的区别。Redis只会缓存所有的 key的信息，如果Redis发现内存的使用量超过了某一个阀值，将触发swap的操作，Redis根据“swappability = age*log(size_in_memory)”计 算出哪些key对应的value需要swap到磁盘。然后再将这些key对应的value持久化到磁盘中，同时在内存中清除。这种特性使得Redis可以 保持超过其机器本身内存大小的数据。当然，机器本身的内存必须要能够保持所有的key，毕竟这些数据是不会进行swap操作的。同时由于Redis将内存 中的数据swap到磁盘中的时候，提供服务的主线程和进行swap操作的子线程会共享这部分内存，所以如果更新需要swap的数据，Redis将阻塞这个 操作，直到子线程完成swap操作后才可以进行修改&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;当 从Redis中读取数据的时候，如果读取的key对应的value不在内存中，那么Redis就需要从swap文件中加载相应数据，然后再返回给请求方。 这里就存在一个I/O线程池的问题。在默认的情况下，Redis会出现阻塞，即完成所有的swap文件加载后才会相应。这种策略在客户端的数量较小，进行 批量操作的时候比较合适。但是如果将Redis应用在一个大型的网站应用程序中，这显然是无法满足大并发的情况的。所以Redis运行我们设置I/O线程 池的大小，对需要从swap文件中加载相应数据的读取请求进行并发操作，减少阻塞的时间。&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot; style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;padding:0px;margin:0px;&quot; /&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;1 &amp;nbsp;Memcached是多线程 ，&lt;/span&gt;&lt;/span&gt;redis是单线程&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;&lt;br /&gt;\r\n&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;\r\n	&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n		2.&lt;a target=&quot;_blank&quot; class=&quot;nounderline&quot; title=&quot;内存&quot; href=&quot;http://product.pcpop.com/Memory/10734_1.html&quot; style=&quot;color:#336699;text-decoration:initial;padding:0px;margin:0px;&quot;&gt;内存&lt;/a&gt;管理方面\r\n	&lt;/p&gt;\r\n	&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n		&amp;emsp;&amp;emsp;Memcached使用预分配的内存池的方式，使用slab和大小不同的chunk来管理内存，Item根据大小选择合适的chunk存储，内存池的方式可以省去申请/释放内存的开销，并且能减小内存碎片产生，但这种方式也会带来一定程度上的空间浪费，并且在内存仍然有很大空间时，新的数据也可能会被剔除，原因可以参考Timyang的文章：http://timyang&lt;a href=&quot;http://lib.csdn.net/base/dotnet&quot; class=&quot;replace_word&quot; title=&quot;.NET知识库&quot; target=&quot;_blank&quot; style=&quot;color:#DF3434;text-decoration:none;font-weight:bold;&quot;&gt;.NET&lt;/a&gt;/data/Memcached-lru-evictions/\r\n	&lt;/p&gt;\r\n	&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n		&amp;emsp;&amp;emsp;Redis使用现场申请内存的方式来存储数据，并且很少使用free-list等方式来优化内存分配，会在一定程度上存在内存碎片，Redis跟据存储命令参数，会把带过期时间的数据单独存放在一起，并把它们称为临时数据，非临时数据是永远不会被剔除的，即便物理内存不够，导致swap也不会剔除任何非临时数据(但会尝试剔除部分临时数据)，这点上Redis更适合作为存储而不是cache。\r\n	&lt;/p&gt;\r\n	&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n		&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n			3.数据一致性问题\r\n		&lt;/p&gt;\r\n		&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n			&amp;emsp;&amp;emsp;Memcached提供了cas命令，可以保证多个并发访问操作同一份数据的一致性问题。 Redis没有提供cas 命令，并不能保证这点，不过Redis提供了事务的功能，可以保证一串 命令的原子性，中间不会被任何操作打断。\r\n		&lt;/p&gt;\r\n		&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n			&amp;emsp;4.存储方式及其它方面\r\n		&lt;/p&gt;\r\n		&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n			&amp;emsp;&amp;emsp;Memcached基本只支持简单的key-value存储，不支持枚举，不支持持久化和复制等功能\r\n		&lt;/p&gt;\r\n		&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n			&amp;emsp;&amp;emsp;Redis除key/value之外，还支持list,set,sorted set,hash等众多数据结构，提供了KEYS\r\n		&lt;/p&gt;\r\n		&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n			&amp;emsp;&amp;emsp;进行枚举操作，但不能在线上使用，如果需要枚举线上数据，Redis提供了工具可以直接扫描其dump文件，枚举出所有数据，Redis还同时提供了持久化和复制等功能。\r\n		&lt;/p&gt;\r\n		&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n			1.Redis使用最佳方式是全部数据in-memory。\r\n		&lt;/p&gt;\r\n		&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n			&amp;emsp;&amp;emsp;2.Redis更多场景是作为Memcached的替代者来使用。\r\n		&lt;/p&gt;\r\n		&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n			&amp;emsp;&amp;emsp;3.当需要除key/value之外的更多数据类型支持时，使用Redis更合适。\r\n		&lt;/p&gt;\r\n		&lt;p style=&quot;margin-top:0px;margin-bottom:0px;padding:0px 0px 15px;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;color:#333333;line-height:26px;&quot;&gt;\r\n			&amp;emsp;&amp;emsp;4.当存储的数据不能被剔除时，使用Redis更合适。\r\n		&lt;/p&gt;\r\n	&lt;/p&gt;\r\n&lt;br /&gt;\r\n&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;span style=&quot;color:#333333;font-family:Arial;font-size:14px;white-space:normal;background-color:#FFFFFF;&quot;&gt;&lt;br /&gt;\r\n&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n&lt;/p&gt;', '1', '1503745993', '1503745993', '1', '0');
INSERT INTO `yl_article` VALUES ('3', 'php面试总结', '一些考察程序的题目', '', '&lt;p&gt;\r\n	1 猴子选大王\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;span style=&quot;background-color:#CCCCCC;&quot;&gt; &lt;/span&gt; \r\n&lt;/p&gt;\r\n&lt;pre class=&quot;prettyprint lang-php&quot;&gt; function  chooseKing($m,$n){\r\n        $nu=0;\r\n        for ($i=1;$i&amp;lt;=$n;$i++){\r\n            $nu=($nu+$m)%$i;\r\n        }\r\n        return $nu+1;\r\n    }&lt;/pre&gt;\r\n&lt;span style=&quot;background-color:#CCCCCC;&quot;&gt;&lt;/span&gt;2，&amp;nbsp;* 字符翻转 &amp;nbsp;strrev()-》原生\r\n&lt;pre class=&quot;prettyprint lang-php&quot;&gt; function getStrRev($str){\r\n        if(!is_string($str)) return 0;\r\n        $lenth=strlen($str);\r\n        $newstr=\'\';\r\n        for($i=$lenth-1;$i&amp;gt;=0;$i--){\r\n            $newstr .=$str{$i};\r\n        }\r\n        return $newstr;\r\n    }&lt;/pre&gt;\r\n3，&amp;nbsp;&amp;nbsp;* 获取20以的偶数 并按倒序排列 &amp;nbsp;[2,4,6,8,10,12,14,16,18] &amp;nbsp;结果为：[18,16,14,12,10,8,6,4,2]\r\n&lt;pre class=&quot;prettyprint lang-php&quot;&gt;function sortEven(){\r\n        //获取偶数\r\n        $even=array();\r\n        for($i=1;$i&amp;lt;20;$i++){\r\n            if($i%2==0)\r\n                $even[]=$i;\r\n        }\r\n        echo &quot;&amp;lt;br/&amp;gt;20以内的偶数序列为：&quot;.implode(\',\',$even);\r\n        //利用原生的\r\n        echo &quot;&amp;lt;br/&amp;gt;利用 array_reverse 倒序排列后的：&quot;.implode(\',\',array_reverse($even));\r\n        echo &quot;&amp;lt;br/&amp;gt;利用冒泡排序排列后的：&quot;.implode(\',\',$this-&amp;gt;bubuleSort($even));\r\n    }\r\n    //冒泡排序\r\n    function  bubuleSort($data){\r\n        if(!is_array($data)) return $data;\r\n        $len=count($data);\r\n        for ($i=0;$i&amp;lt;=$len;$i++){\r\n            for ($j=$len-1;$j&amp;gt;$i;$j--){\r\n                if($data[$j-1]&amp;lt;$data[$j]){\r\n                    $temp=$data[$j-1];\r\n                    $data[$j-1]=$data[$j];\r\n                    $data[$j]=$temp;\r\n\r\n                }\r\n            }\r\n        }\r\n        return $data;\r\n    }\r\n&lt;/pre&gt;\r\n4  100元买了100只家畜.母鸡3元一只,公鸡4元一只.小鸡0.5一周\r\n&lt;pre class=&quot;prettyprint lang-php&quot;&gt;function  muj($total,$gjPrice,$mjPrice,$xjPrice){\r\n       $gj_max=floor($total/$gjPrice);\r\n        $mj_max=floor($total/$mjPrice);\r\n        for ($mj=0;$mj&amp;lt;=$mj_max;$mj++){\r\n            for ($gj=0;$gj&amp;lt;=$gj_max;$gj++){\r\n                if($mj*$mjPrice+$gj*$gjPrice+(100-$mj-$gj)*$xjPrice==100){\r\n                    echo \'&amp;lt;br/&amp;gt;(母鸡,公鸡,小鸡）：（\'.$gj.\',\'.$mj.\',\'.(100-$mj-$gj).\')\';\r\n                }else{\r\n                   // echo \'&amp;lt;br/&amp;gt;失败(母鸡,公鸡,小鸡）：（\'.$mj.\',\'.$gj.\',\'.(100-$mj-$gj).\')\';\r\n                }\r\n            }\r\n        }\r\n\r\n    }&lt;/pre&gt;\r\n&lt;br /&gt;', '1', '1503746716', '1503746496', '1', '0');

-- ----------------------------
-- Table structure for yl_cate
-- ----------------------------
DROP TABLE IF EXISTS `yl_cate`;
CREATE TABLE `yl_cate` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT COMMENT '栏目id',
  `catename` varchar(40) NOT NULL COMMENT '栏目名称',
  `sort` mediumint(9) NOT NULL DEFAULT '50' COMMENT '栏目排序',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yl_cate
-- ----------------------------
INSERT INTO `yl_cate` VALUES ('1', '技术文章', '50');
INSERT INTO `yl_cate` VALUES ('2', '经典文章', '50');
INSERT INTO `yl_cate` VALUES ('3', '爱情美文', '50');
INSERT INTO `yl_cate` VALUES ('4', '单身趴', '50');
INSERT INTO `yl_cate` VALUES ('5', '在线留言', '50');

-- ----------------------------
-- Table structure for yl_link
-- ----------------------------
DROP TABLE IF EXISTS `yl_link`;
CREATE TABLE `yl_link` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT COMMENT '链接id',
  `title` varchar(40) NOT NULL COMMENT '链接标题',
  `url` varchar(100) NOT NULL COMMENT '链接地址',
  `desc` varchar(255) NOT NULL COMMENT '链接描述',
  `sort` int(11) NOT NULL DEFAULT '50',
  `status` enum('0','1') NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yl_link
-- ----------------------------
